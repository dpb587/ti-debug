#!/usr/bin/env node

var util = require('util');
var TiDebug = require('../lib/ti-debug/server');
var DBGpService = require('../lib/dbgp/service');
var DBGpProxyIDE = require('../lib/dbgp/proxy/ide');
var V8Service= require('../lib/v8/service');
var InspectorService = require('../lib/inspector/service');

/**
 * Command-line
 */
var cli = require('commander');

cli.coerceListener = function (val) {
    val = val.split(':');

    if (val.length != 2) {
        throw new Error('Listener should be in the format of ip:port.');
    }

    if (val[0] == '*') {
        val[0] = '0.0.0.0';
    }

    return val;
};

cli
    .version('0.1.0')
    .usage('[options]')
    .option('--dbgp <ip:port>', 'Listener for DBGp connections [*:9000]', cli.coerceListener, ['0.0.0.0', '9000'])
    .option('--dbgp-proxy <ip:port>', 'Listener for proxying DBGp to IDE connections [*:9001]', cli.coerceListener, ['0.0.0.0', '9001'])
    .option('--server <ip:port>', 'Listener for browser connections [*:9222]', cli.coerceListener, ['0.0.0.0', '9222'])
    .option('--log [none|error|warn|info|debug]', 'Logging level [info]', 'info')
    .parse(process.argv);

/**
 * logger
 */
var Logger = require('socket.io/lib/logger'), logger;

if (cli.log && cli.log != 'none') {
    logger = new Logger();
    logger.level = ['error', 'warn', 'info', 'debug'].indexOf(cli.log);
}


var server = new TiDebug(
    {
        host : cli.server[0],
        port : cli.server[1]
    },
    logger
);

server.addService('dbgp', function () {
    var dbgp = new DBGpService(
        {
            host : cli.dbgp[0],
            port : cli.dbgp[1]
        },
        logger
    );

    var proxy = new DBGpProxyIDE(
        {
            host : cli.dbgpProxy[0],
            port : cli.dbgpProxy[1]
        },
        logger
    );

    proxy.start();

    dbgp.proxy.addDelegate('ide', proxy);

    return dbgp;
});

server.addService('v8', new V8Service());

server.addService('inspector', new InspectorService());

server.start();
