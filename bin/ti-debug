#!/usr/bin/env node

var util = require('util');
var manifest = require('../lib/ti-debug/manifest');
var TiDebugService = require('../lib/ti-debug/service');
var InspectorService = require('../lib/inspector/service');
var DBGpService = require('../lib/dbgp/service');
var DBGpEngineService = require('../lib/dbgp/engine/service');
var DBGpEngineProxyService = require('../lib/dbgp/engine/proxy/standard');

/**
 * Command-line
 */
var cli = require('commander');

cli.coerceListener = function (val) {
    val = val.split(':');

    if (val.length != 2) {
        throw new Error('Listener should be in the format of ip:port.');
    }

    if (val[0] == '*') {
        val[0] = '0.0.0.0';
    }

    return val;
};

cli
    .version(manifest.VERSION)
    .usage('[options]')
    .option('--dbgp <ip:port>', 'Listener for DBGp connections [127.0.0.1:9000]', cli.coerceListener, ['127.0.0.1', '9000'])
    .option('--dbgp-proxy <ip:port>', 'Listener for proxying DBGp to IDE connections [127.0.0.1:9001]', cli.coerceListener, ['127.0.0.1', '9001'])
    .option('--server <ip:port>', 'Listener for browser connections [127.0.0.1:9222]', cli.coerceListener, ['127.0.0.1', '9222'])
    .option('--log [none|error|warn|info|debug]', 'Logging level [info]', 'info')
    .parse(process.argv);

/**
 * logger
 */
var Logger = require('socket.io/lib/logger'), logger;

if (cli.log && cli.log != 'none') {
    logger = new Logger();
    logger.level = ['error', 'warn', 'info', 'debug'].indexOf(cli.log);
}


var dbgp_engine = new DBGpEngineService(
    {
        host : cli.dbgp[0],
        port : cli.dbgp[1]
    },
    logger
);

var dbgp_engine_proxy = new DBGpEngineProxyService(
    dbgp_engine,
    {
            host : cli.dbgpProxy[0],
            port : cli.dbgpProxy[1]
    },
    logger
);

dbgp_engine.start();
dbgp_engine_proxy.start();

var tidebug = new TiDebugService(
    {
        host : cli.server[0],
        port : cli.server[1]
    },
    logger
);

tidebug.register(new DBGpService(dbgp_engine, {}, logger));
tidebug.register(new InspectorService({}, logger));

tidebug.start();
